interactive_expr: Begin Case Verbatim Of LBRACKET WILD ARROW Skip With
##
## Ends in an error in state: 506.
##
## case(if_clause) -> Case expr Of LBRACKET option(VBAR) cases(if_clause) . RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR) cases(if_clause)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 508, spurious reduction of production nsepseq(case_clause(if_clause),VBAR) -> case_clause(if_clause) 
## In state 505, spurious reduction of production cases(if_clause) -> nsepseq(case_clause(if_clause),VBAR) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Case Verbatim Of LBRACKET With
##
## Ends in an error in state: 421.
##
## case(if_clause) -> Case expr Of LBRACKET option(VBAR) . cases(if_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 420, spurious reduction of production option(VBAR) -> 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Case Verbatim Of WILD ARROW Skip VBAR With
##
## Ends in an error in state: 509.
##
## nsepseq(case_clause(if_clause),VBAR) -> case_clause(if_clause) VBAR . nsepseq(case_clause(if_clause),VBAR) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## case_clause(if_clause) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Case Verbatim Of WILD ARROW Skip With
##
## Ends in an error in state: 512.
##
## case(if_clause) -> Case expr Of option(VBAR) cases(if_clause) . End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR) cases(if_clause)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 508, spurious reduction of production nsepseq(case_clause(if_clause),VBAR) -> case_clause(if_clause) 
## In state 505, spurious reduction of production cases(if_clause) -> nsepseq(case_clause(if_clause),VBAR) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Case Verbatim Of WILD ARROW With
##
## Ends in an error in state: 479.
##
## case_clause(if_clause) -> pattern ARROW . if_clause [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Case Verbatim Of WILD With
##
## Ends in an error in state: 478.
##
## case_clause(if_clause) -> pattern . ARROW if_clause [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 457, spurious reduction of production pattern -> core_pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Case Verbatim Of With
##
## Ends in an error in state: 511.
##
## case(if_clause) -> Case expr Of option(VBAR) . cases(if_clause) End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 418, spurious reduction of production option(VBAR) -> 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Case Verbatim With
##
## Ends in an error in state: 417.
##
## case(if_clause) -> Case expr . Of option(VBAR) cases(if_clause) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## case(if_clause) -> Case expr . Of LBRACKET option(VBAR) cases(if_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Case With
##
## Ends in an error in state: 416.
##
## case(if_clause) -> Case . expr Of option(VBAR) cases(if_clause) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## case(if_clause) -> Case . expr Of LBRACKET option(VBAR) cases(if_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Constr DOT And With
##
## Ends in an error in state: 486.
##
## fun_call -> module_access_e . arguments [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## module_access_e
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Constr With
##
## Ends in an error in state: 150.
##
## module_access_e -> Constr . DOT module_var_e [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ARROW Ident In Map Verbatim With
##
## Ends in an error in state: 414.
##
## for_loop -> For Ident ARROW Ident In Map expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ARROW Ident In Map expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ARROW Ident In Map With
##
## Ends in an error in state: 413.
##
## for_loop -> For Ident ARROW Ident In Map . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ARROW Ident In Map
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ARROW Ident In With
##
## Ends in an error in state: 412.
##
## for_loop -> For Ident ARROW Ident In . Map expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ARROW Ident In
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ARROW Ident With
##
## Ends in an error in state: 411.
##
## for_loop -> For Ident ARROW Ident . In Map expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ARROW Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ARROW With
##
## Ends in an error in state: 410.
##
## for_loop -> For Ident ARROW . Ident In Map expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ASS Verbatim To Verbatim Step Verbatim With
##
## Ends in an error in state: 407.
##
## for_loop -> For Ident ASS expr To expr step_clause . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ASS expr To expr step_clause
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 406, spurious reduction of production step_clause -> Step expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ASS Verbatim To Verbatim Step With
##
## Ends in an error in state: 405.
##
## step_clause -> Step . expr [ Block Begin ]
##
## The known suffix of the stack is as follows:
## Step
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ASS Verbatim To Verbatim With
##
## Ends in an error in state: 404.
##
## for_loop -> For Ident ASS expr To expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For Ident ASS expr To expr . step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ASS expr To expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ASS Verbatim To With
##
## Ends in an error in state: 403.
##
## for_loop -> For Ident ASS expr To . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For Ident ASS expr To . expr step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ASS expr To
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ASS Verbatim With
##
## Ends in an error in state: 402.
##
## for_loop -> For Ident ASS expr . To expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For Ident ASS expr . To expr step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ASS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident ASS With
##
## Ends in an error in state: 401.
##
## for_loop -> For Ident ASS . expr To expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For Ident ASS . expr To expr step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident ASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident In Set Verbatim With
##
## Ends in an error in state: 399.
##
## for_loop -> For Ident In collection expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident In collection expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident In Set With
##
## Ends in an error in state: 398.
##
## for_loop -> For Ident In collection . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident In collection
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident In With
##
## Ends in an error in state: 395.
##
## for_loop -> For Ident In . collection expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident In
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For Ident With
##
## Ends in an error in state: 394.
##
## for_loop -> For Ident . ARROW Ident In Map expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For Ident . ASS expr To expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For Ident . ASS expr To expr step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For Ident . In collection expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin For With
##
## Ends in an error in state: 393.
##
## for_loop -> For . Ident ARROW Ident In Map expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For . Ident ASS expr To expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For . Ident ASS expr To expr step_clause block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For . Ident In collection expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Ident ASS With
##
## Ends in an error in state: 492.
##
## assignment -> lhs ASS . rhs [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## lhs ASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Ident With
##
## Ends in an error in state: 491.
##
## assignment -> lhs . ASS rhs [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## lhs
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 391, spurious reduction of production path -> Ident 
## In state 485, spurious reduction of production lhs -> path 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin If Verbatim Then LBRACE Skip With
##
## Ends in an error in state: 526.
##
## clause_block -> LBRACE sep_or_term_list(statement,SEMI) . RBRACE [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## LBRACE sep_or_term_list(statement,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 514, spurious reduction of production nsepseq(statement,SEMI) -> statement 
## In state 529, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin If Verbatim Then LBRACE With
##
## Ends in an error in state: 390.
##
## clause_block -> LBRACE . sep_or_term_list(statement,SEMI) RBRACE [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin If Verbatim Then Skip Else With
##
## Ends in an error in state: 532.
##
## conditional -> If expr Then if_clause option(SEMI) Else . if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr Then if_clause option(SEMI) Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin If Verbatim Then Skip With
##
## Ends in an error in state: 531.
##
## conditional -> If expr Then if_clause option(SEMI) . Else if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr Then if_clause option(SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 530, spurious reduction of production option(SEMI) -> 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin If Verbatim Then With
##
## Ends in an error in state: 389.
##
## conditional -> If expr Then . if_clause option(SEMI) Else if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr Then
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin If Verbatim With
##
## Ends in an error in state: 388.
##
## conditional -> If expr . Then if_clause option(SEMI) Else if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin If With
##
## Ends in an error in state: 387.
##
## conditional -> If . expr Then if_clause option(SEMI) Else if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch Ident While
##
## Ends in an error in state: 286.
##
## map_patch -> Patch path . With ne_injection(Map,binding) [ VBAR SEMI RBRACKET RBRACE End Else ]
## record_patch -> Patch path . With record_expr [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_patch -> Patch path . With ne_injection(Set,expr) [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Patch path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 187, spurious reduction of production path -> Ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch Ident With Map LBRACKET Verbatim ARROW Bytes With
##
## Ends in an error in state: 302.
##
## ne_injection(Map,binding) -> Map LBRACKET sep_or_term_list(binding,SEMI) . RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 308, spurious reduction of production binding -> expr ARROW expr 
## In state 309, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 305, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch Ident With Map LBRACKET With
##
## Ends in an error in state: 301.
##
## ne_injection(Map,binding) -> Map LBRACKET . sep_or_term_list(binding,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch Ident With Map Verbatim ARROW Bytes With
##
## Ends in an error in state: 313.
##
## ne_injection(Map,binding) -> Map sep_or_term_list(binding,SEMI) . End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 308, spurious reduction of production binding -> expr ARROW expr 
## In state 309, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 305, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch Ident With Map With
##
## Ends in an error in state: 300.
##
## ne_injection(Map,binding) -> Map . sep_or_term_list(binding,SEMI) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## ne_injection(Map,binding) -> Map . LBRACKET sep_or_term_list(binding,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch Ident With Set LBRACKET Verbatim With
##
## Ends in an error in state: 290.
##
## ne_injection(Set,expr) -> Set LBRACKET sep_or_term_list(expr,SEMI) . RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 294, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 293, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch Ident With Set LBRACKET With
##
## Ends in an error in state: 289.
##
## ne_injection(Set,expr) -> Set LBRACKET . sep_or_term_list(expr,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch Ident With Set Verbatim With
##
## Ends in an error in state: 298.
##
## ne_injection(Set,expr) -> Set sep_or_term_list(expr,SEMI) . End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 294, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 293, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch Ident With Set With
##
## Ends in an error in state: 288.
##
## ne_injection(Set,expr) -> Set . sep_or_term_list(expr,SEMI) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## ne_injection(Set,expr) -> Set . LBRACKET sep_or_term_list(expr,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch Ident With With
##
## Ends in an error in state: 287.
##
## map_patch -> Patch path With . ne_injection(Map,binding) [ VBAR SEMI RBRACKET RBRACE End Else ]
## record_patch -> Patch path With . record_expr [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_patch -> Patch path With . ne_injection(Set,expr) [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Patch path With
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Patch With
##
## Ends in an error in state: 285.
##
## map_patch -> Patch . path With ne_injection(Map,binding) [ VBAR SEMI RBRACKET RBRACE End Else ]
## record_patch -> Patch . path With record_expr [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_patch -> Patch . path With ne_injection(Set,expr) [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Patch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Remove Verbatim From Map With
##
## Ends in an error in state: 283.
##
## map_remove -> Remove expr From Map . path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr From Map
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Remove Verbatim From Set With
##
## Ends in an error in state: 281.
##
## set_remove -> Remove expr From Set . path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr From Set
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Remove Verbatim From With
##
## Ends in an error in state: 280.
##
## map_remove -> Remove expr From . Map path [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_remove -> Remove expr From . Set path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr From
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Remove Verbatim With
##
## Ends in an error in state: 279.
##
## map_remove -> Remove expr . From Map path [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_remove -> Remove expr . From Set path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Remove With
##
## Ends in an error in state: 278.
##
## map_remove -> Remove . expr From Map path [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_remove -> Remove . expr From Set path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Skip End While
##
## Ends in an error in state: 256.
##
## block_with -> block . With expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Skip End With With
##
## Ends in an error in state: 257.
##
## block_with -> block With . expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## block With
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Skip With
##
## Ends in an error in state: 534.
##
## block -> Begin sep_or_term_list(statement,SEMI) . End [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Begin sep_or_term_list(statement,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 514, spurious reduction of production nsepseq(statement,SEMI) -> statement 
## In state 529, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Var Ident ASS With
##
## Ends in an error in state: 173.
##
## unqualified_decl(ASS) -> Ident ASS . expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident ASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Var Ident COLON WILD ASS With
##
## Ends in an error in state: 274.
##
## unqualified_decl(ASS) -> Ident type_annot ASS . expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident type_annot ASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Var Ident COLON WILD With
##
## Ends in an error in state: 273.
##
## unqualified_decl(ASS) -> Ident type_annot . ASS expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production cartesian -> core_type 
## In state 47, spurious reduction of production fun_type -> cartesian 
## In state 68, spurious reduction of production type_expr -> fun_type 
## In state 172, spurious reduction of production type_annot -> COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Var Ident With
##
## Ends in an error in state: 170.
##
## unqualified_decl(ASS) -> Ident . ASS expr [ SEMI RBRACE End ]
## unqualified_decl(ASS) -> Ident . type_annot ASS expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin Var With
##
## Ends in an error in state: 169.
##
## open_var_decl -> Var . unqualified_decl(ASS) [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin While Verbatim With
##
## Ends in an error in state: 541.
##
## while_loop -> While expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## While expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin While With
##
## Ends in an error in state: 164.
##
## while_loop -> While . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## While
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Begin With
##
## Ends in an error in state: 168.
##
## block -> Begin . sep_or_term_list(statement,SEMI) End [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Begin
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: BigMap LBRACKET Verbatim ARROW Bytes With
##
## Ends in an error in state: 536.
##
## injection(BigMap,binding) -> BigMap LBRACKET sep_or_term_list(binding,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap LBRACKET sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 308, spurious reduction of production binding -> expr ARROW expr 
## In state 309, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 305, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: BigMap LBRACKET With
##
## Ends in an error in state: 166.
##
## injection(BigMap,binding) -> BigMap LBRACKET . sep_or_term_list(binding,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(BigMap,binding) -> BigMap LBRACKET . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: BigMap Verbatim ARROW Bytes With
##
## Ends in an error in state: 539.
##
## injection(BigMap,binding) -> BigMap sep_or_term_list(binding,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 308, spurious reduction of production binding -> expr ARROW expr 
## In state 309, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 305, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: BigMap With
##
## Ends in an error in state: 165.
##
## injection(BigMap,binding) -> BigMap . sep_or_term_list(binding,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(BigMap,binding) -> BigMap . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(BigMap,binding) -> BigMap . LBRACKET sep_or_term_list(binding,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(BigMap,binding) -> BigMap . LBRACKET RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Block LBRACE Skip With
##
## Ends in an error in state: 543.
##
## block -> Block LBRACE sep_or_term_list(statement,SEMI) . RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Block LBRACE sep_or_term_list(statement,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 514, spurious reduction of production nsepseq(statement,SEMI) -> statement 
## In state 529, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Block LBRACE With
##
## Ends in an error in state: 163.
##
## block -> Block LBRACE . sep_or_term_list(statement,SEMI) RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Block LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Block With
##
## Ends in an error in state: 162.
##
## block -> Block . LBRACE sep_or_term_list(statement,SEMI) RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_Some With
##
## Ends in an error in state: 158.
##
## core_expr -> C_Some . arguments [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of C_Some LPAR WILD With
##
## Ends in an error in state: 444.
##
## par(core_pattern) -> LPAR core_pattern . RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of C_Some LPAR With
##
## Ends in an error in state: 436.
##
## par(core_pattern) -> LPAR . core_pattern RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of C_Some With
##
## Ends in an error in state: 435.
##
## constr_pattern -> C_Some . par(core_pattern) [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of Constr LPAR With
##
## Ends in an error in state: 434.
##
## par(nsepseq(core_pattern,COMMA)) -> LPAR . nsepseq(core_pattern,COMMA) RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LBRACKET WILD ARROW Bytes With
##
## Ends in an error in state: 553.
##
## case(expr) -> Case expr Of LBRACKET option(VBAR) cases(expr) . RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR) cases(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 551, spurious reduction of production case_clause(expr) -> pattern ARROW expr 
## In state 555, spurious reduction of production nsepseq(case_clause(expr),VBAR) -> case_clause(expr) 
## In state 552, spurious reduction of production cases(expr) -> nsepseq(case_clause(expr),VBAR) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LBRACKET With
##
## Ends in an error in state: 548.
##
## case(expr) -> Case expr Of LBRACKET option(VBAR) . cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 547, spurious reduction of production option(VBAR) -> 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LPAR WILD COMMA With
##
## Ends in an error in state: 451.
##
## nsepseq(core_pattern,COMMA) -> core_pattern COMMA . nsepseq(core_pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## core_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LPAR WILD CONS Bytes With
##
## Ends in an error in state: 463.
##
## par(cons_pattern) -> LPAR cons_pattern . RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR cons_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 457, spurious reduction of production pattern -> core_pattern 
## In state 456, spurious reduction of production cons_pattern -> core_pattern CONS pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LPAR WILD CONS With
##
## Ends in an error in state: 455.
##
## cons_pattern -> core_pattern CONS . pattern [ RPAR ]
##
## The known suffix of the stack is as follows:
## core_pattern CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LPAR WILD With
##
## Ends in an error in state: 448.
##
## par(nsepseq(core_pattern,COMMA)) -> LPAR nsepseq(core_pattern,COMMA) . RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(core_pattern,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 454, spurious reduction of production nsepseq(core_pattern,COMMA) -> core_pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LPAR With
##
## Ends in an error in state: 429.
##
## par(cons_pattern) -> LPAR . cons_pattern RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## par(nsepseq(core_pattern,COMMA)) -> LPAR . nsepseq(core_pattern,COMMA) RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List LBRACKET WILD With
##
## Ends in an error in state: 467.
##
## injection(List,core_pattern) -> List LBRACKET sep_or_term_list(core_pattern,SEMI) . RBRACKET [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET sep_or_term_list(core_pattern,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 471, spurious reduction of production nsepseq(core_pattern,SEMI) -> core_pattern 
## In state 470, spurious reduction of production sep_or_term_list(core_pattern,SEMI) -> nsepseq(core_pattern,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List LBRACKET With
##
## Ends in an error in state: 465.
##
## injection(List,core_pattern) -> List LBRACKET . sep_or_term_list(core_pattern,SEMI) RBRACKET [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## injection(List,core_pattern) -> List LBRACKET . RBRACKET [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List WILD With
##
## Ends in an error in state: 476.
##
## injection(List,core_pattern) -> List sep_or_term_list(core_pattern,SEMI) . End [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List sep_or_term_list(core_pattern,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 471, spurious reduction of production nsepseq(core_pattern,SEMI) -> core_pattern 
## In state 470, spurious reduction of production sep_or_term_list(core_pattern,SEMI) -> nsepseq(core_pattern,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List With
##
## Ends in an error in state: 428.
##
## injection(List,core_pattern) -> List . sep_or_term_list(core_pattern,SEMI) End [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## injection(List,core_pattern) -> List . End [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## injection(List,core_pattern) -> List . LBRACKET sep_or_term_list(core_pattern,SEMI) RBRACKET [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## injection(List,core_pattern) -> List . LBRACKET RBRACKET [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD ARROW Bytes VBAR With
##
## Ends in an error in state: 556.
##
## nsepseq(case_clause(expr),VBAR) -> case_clause(expr) VBAR . nsepseq(case_clause(expr),VBAR) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## case_clause(expr) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD ARROW Bytes With
##
## Ends in an error in state: 559.
##
## case(expr) -> Case expr Of option(VBAR) cases(expr) . End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR) cases(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 551, spurious reduction of production case_clause(expr) -> pattern ARROW expr 
## In state 555, spurious reduction of production nsepseq(case_clause(expr),VBAR) -> case_clause(expr) 
## In state 552, spurious reduction of production cases(expr) -> nsepseq(case_clause(expr),VBAR) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD ARROW With
##
## Ends in an error in state: 550.
##
## case_clause(expr) -> pattern ARROW . expr [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD CONS WILD CONS With
##
## Ends in an error in state: 461.
##
## nsepseq(core_pattern,CONS) -> core_pattern CONS . nsepseq(core_pattern,CONS) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD CONS With
##
## Ends in an error in state: 458.
##
## pattern -> core_pattern CONS . nsepseq(core_pattern,CONS) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD With
##
## Ends in an error in state: 549.
##
## case_clause(expr) -> pattern . ARROW expr [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 457, spurious reduction of production pattern -> core_pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of With
##
## Ends in an error in state: 558.
##
## case(expr) -> Case expr Of option(VBAR) . cases(expr) End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 546, spurious reduction of production option(VBAR) -> 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim With
##
## Ends in an error in state: 545.
##
## case(expr) -> Case expr . Of option(VBAR) cases(expr) End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
## case(expr) -> Case expr . Of LBRACKET option(VBAR) cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case With
##
## Ends in an error in state: 157.
##
## case(expr) -> Case . expr Of option(VBAR) cases(expr) End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
## case(expr) -> Case . expr Of LBRACKET option(VBAR) cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr DOT With
##
## Ends in an error in state: 138.
##
## module_access_e -> Constr DOT . module_var_e [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident RPAR COLON WILD Is With
##
## Ends in an error in state: 563.
##
## fun_expr -> Function parameters type_annot Is . expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters type_annot Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident RPAR COLON WILD With
##
## Ends in an error in state: 562.
##
## fun_expr -> Function parameters type_annot . Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production cartesian -> core_type 
## In state 47, spurious reduction of production fun_type -> cartesian 
## In state 68, spurious reduction of production type_expr -> fun_type 
## In state 172, spurious reduction of production type_annot -> COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident RPAR Is With
##
## Ends in an error in state: 135.
##
## fun_expr -> Function parameters Is . expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident RPAR With
##
## Ends in an error in state: 134.
##
## fun_expr -> Function parameters . Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
## fun_expr -> Function parameters . type_annot Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident With
##
## Ends in an error in state: 102.
##
## param_decl -> Const Ident . option(param_type) [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Const Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const With
##
## Ends in an error in state: 101.
##
## param_decl -> Const . Ident option(param_type) [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Var Ident COLON WILD With
##
## Ends in an error in state: 107.
##
## par(nsepseq(param_decl,SEMI)) -> LPAR nsepseq(param_decl,SEMI) . RPAR [ Is COLON ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(param_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production cartesian -> core_type 
## In state 47, spurious reduction of production fun_type -> cartesian 
## In state 98, spurious reduction of production param_type -> COLON fun_type 
## In state 99, spurious reduction of production option(param_type) -> param_type 
## In state 100, spurious reduction of production param_decl -> Var Ident option(param_type) 
## In state 104, spurious reduction of production nsepseq(param_decl,SEMI) -> param_decl 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Var Ident COLON With
##
## Ends in an error in state: 97.
##
## param_type -> COLON . fun_type [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Var Ident SEMI With
##
## Ends in an error in state: 105.
##
## nsepseq(param_decl,SEMI) -> param_decl SEMI . nsepseq(param_decl,SEMI) [ RPAR ]
##
## The known suffix of the stack is as follows:
## param_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Var Ident With
##
## Ends in an error in state: 96.
##
## param_decl -> Var Ident . option(param_type) [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Var Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Var With
##
## Ends in an error in state: 95.
##
## param_decl -> Var . Ident option(param_type) [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR With
##
## Ends in an error in state: 94.
##
## par(nsepseq(param_decl,SEMI)) -> LPAR . nsepseq(param_decl,SEMI) RPAR [ Is COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function With
##
## Ends in an error in state: 133.
##
## fun_expr -> Function . parameters Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
## fun_expr -> Function . parameters type_annot Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Function
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT Int DOT With
##
## Ends in an error in state: 147.
##
## nsepseq(selection,DOT) -> selection DOT . nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## selection DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT With
##
## Ends in an error in state: 143.
##
## projection -> Ident DOT . nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Ident DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Verbatim With
##
## Ends in an error in state: 269.
##
## brackets(expr) -> LBRACKET expr . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET With
##
## Ends in an error in state: 268.
##
## brackets(expr) -> LBRACKET . expr RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LPAR Verbatim COMMA With
##
## Ends in an error in state: 568.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LPAR Verbatim With
##
## Ends in an error in state: 565.
##
## par(nsepseq(expr,COMMA)) -> LPAR nsepseq(expr,COMMA) . RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(expr,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 567, spurious reduction of production nsepseq(expr,COMMA) -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LPAR With
##
## Ends in an error in state: 132.
##
## par(nsepseq(expr,COMMA)) -> LPAR . nsepseq(expr,COMMA) RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident While
##
## Ends in an error in state: 183.
##
## map_lookup -> path . brackets(expr) [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## record_update -> path . With ne_injection(Record,field_path_assignment) [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 131, spurious reduction of production path -> Ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident EQ Bytes With
##
## Ends in an error in state: 265.
##
## ne_injection(Record,field_path_assignment) -> Record sep_or_term_list(field_path_assignment,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record sep_or_term_list(field_path_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 219, spurious reduction of production field_path_assignment -> path EQ expr 
## In state 261, spurious reduction of production nsepseq(field_path_assignment,SEMI) -> field_path_assignment 
## In state 260, spurious reduction of production sep_or_term_list(field_path_assignment,SEMI) -> nsepseq(field_path_assignment,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident EQ With
##
## Ends in an error in state: 192.
##
## field_path_assignment -> path EQ . expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## path EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident With
##
## Ends in an error in state: 191.
##
## field_path_assignment -> path . EQ expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 187, spurious reduction of production path -> Ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record LBRACKET Ident EQ Bytes With
##
## Ends in an error in state: 188.
##
## ne_injection(Record,field_path_assignment) -> Record LBRACKET sep_or_term_list(field_path_assignment,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET sep_or_term_list(field_path_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 219, spurious reduction of production field_path_assignment -> path EQ expr 
## In state 261, spurious reduction of production nsepseq(field_path_assignment,SEMI) -> field_path_assignment 
## In state 260, spurious reduction of production sep_or_term_list(field_path_assignment,SEMI) -> nsepseq(field_path_assignment,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record LBRACKET With
##
## Ends in an error in state: 186.
##
## ne_injection(Record,field_path_assignment) -> Record LBRACKET . sep_or_term_list(field_path_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record With
##
## Ends in an error in state: 185.
##
## ne_injection(Record,field_path_assignment) -> Record . sep_or_term_list(field_path_assignment,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## ne_injection(Record,field_path_assignment) -> Record . LBRACKET sep_or_term_list(field_path_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With With
##
## Ends in an error in state: 184.
##
## record_update -> path With . ne_injection(Record,field_path_assignment) [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## path With
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If Verbatim Then Verbatim Else With
##
## Ends in an error in state: 574.
##
## cond_expr -> If expr Then expr option(SEMI) Else . expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## If expr Then expr option(SEMI) Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If Verbatim Then Verbatim With
##
## Ends in an error in state: 573.
##
## cond_expr -> If expr Then expr option(SEMI) . Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## If expr Then expr option(SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 572, spurious reduction of production option(SEMI) -> 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If Verbatim Then With
##
## Ends in an error in state: 571.
##
## cond_expr -> If expr Then . expr option(SEMI) Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## If expr Then
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If Verbatim With
##
## Ends in an error in state: 570.
##
## cond_expr -> If expr . Then expr option(SEMI) Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If With
##
## Ends in an error in state: 130.
##
## cond_expr -> If . expr Then expr option(SEMI) Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Module Function From End Else EOF Const COMMA Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim COLON Constr With
##
## Ends in an error in state: 585.
##
## par(annot_expr) -> LPAR annot_expr . RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 584, spurious reduction of production annot_expr -> disj_expr COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim COLON With
##
## Ends in an error in state: 583.
##
## annot_expr -> disj_expr COLON . type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## disj_expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim COMMA Bytes With
##
## Ends in an error in state: 576.
##
## par(tuple_comp) -> LPAR tuple_comp . RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR tuple_comp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 567, spurious reduction of production nsepseq(expr,COMMA) -> expr 
## In state 581, spurious reduction of production tuple_comp -> expr COMMA nsepseq(expr,COMMA) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim COMMA With
##
## Ends in an error in state: 580.
##
## tuple_comp -> expr COMMA . nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim With
##
## Ends in an error in state: 578.
##
## par(expr) -> LPAR expr . RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## tuple_comp -> expr . COMMA nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 582, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR With
##
## Ends in an error in state: 128.
##
## par(annot_expr) -> LPAR . annot_expr RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## par(expr) -> LPAR . expr RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LPAR LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## par(tuple_comp) -> LPAR . tuple_comp RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Lang Verbatim With
##
## Ends in an error in state: 587.
##
## code_inj -> Lang expr . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Lang expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Lang With
##
## Ends in an error in state: 127.
##
## code_inj -> Lang . expr RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Lang
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: List LBRACKET Verbatim With
##
## Ends in an error in state: 591.
##
## injection(List,expr) -> List LBRACKET sep_or_term_list(expr,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 294, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 293, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: List LBRACKET With
##
## Ends in an error in state: 589.
##
## injection(List,expr) -> List LBRACKET . sep_or_term_list(expr,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(List,expr) -> List LBRACKET . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: List Verbatim With
##
## Ends in an error in state: 594.
##
## injection(List,expr) -> List sep_or_term_list(expr,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## List sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 294, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 293, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: List With
##
## Ends in an error in state: 126.
##
## injection(List,expr) -> List . sep_or_term_list(expr,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(List,expr) -> List . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(List,expr) -> List . LBRACKET sep_or_term_list(expr,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(List,expr) -> List . LBRACKET RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## List
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: MINUS With
##
## Ends in an error in state: 125.
##
## unary_expr -> MINUS . core_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map LBRACKET Verbatim ARROW Bytes With
##
## Ends in an error in state: 599.
##
## injection(Map,binding) -> Map LBRACKET sep_or_term_list(binding,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 308, spurious reduction of production binding -> expr ARROW expr 
## In state 309, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 305, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map LBRACKET With
##
## Ends in an error in state: 597.
##
## injection(Map,binding) -> Map LBRACKET . sep_or_term_list(binding,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(Map,binding) -> Map LBRACKET . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map Verbatim ARROW Bytes With
##
## Ends in an error in state: 602.
##
## injection(Map,binding) -> Map sep_or_term_list(binding,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Map sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 308, spurious reduction of production binding -> expr ARROW expr 
## In state 309, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 305, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map Verbatim ARROW With
##
## Ends in an error in state: 307.
##
## binding -> expr ARROW . expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## expr ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map Verbatim With
##
## Ends in an error in state: 306.
##
## binding -> expr . ARROW expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map With
##
## Ends in an error in state: 124.
##
## injection(Map,binding) -> Map . sep_or_term_list(binding,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(Map,binding) -> Map . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(Map,binding) -> Map . LBRACKET sep_or_term_list(binding,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(Map,binding) -> Map . LBRACKET RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Map
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Not With
##
## Ends in an error in state: 120.
##
## unary_expr -> Not . core_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Not
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record Ident EQ Bytes With
##
## Ends in an error in state: 614.
##
## ne_injection(Record,field_assignment) -> Record sep_or_term_list(field_assignment,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record sep_or_term_list(field_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 605, spurious reduction of production field_assignment -> Ident EQ expr 
## In state 610, spurious reduction of production nsepseq(field_assignment,SEMI) -> field_assignment 
## In state 609, spurious reduction of production sep_or_term_list(field_assignment,SEMI) -> nsepseq(field_assignment,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record Ident EQ With
##
## Ends in an error in state: 119.
##
## field_assignment -> Ident EQ . expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record Ident With
##
## Ends in an error in state: 118.
##
## field_assignment -> Ident . EQ expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record LBRACKET Ident EQ Bytes With
##
## Ends in an error in state: 606.
##
## ne_injection(Record,field_assignment) -> Record LBRACKET sep_or_term_list(field_assignment,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET sep_or_term_list(field_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 605, spurious reduction of production field_assignment -> Ident EQ expr 
## In state 610, spurious reduction of production nsepseq(field_assignment,SEMI) -> field_assignment 
## In state 609, spurious reduction of production sep_or_term_list(field_assignment,SEMI) -> nsepseq(field_assignment,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record LBRACKET With
##
## Ends in an error in state: 117.
##
## ne_injection(Record,field_assignment) -> Record LBRACKET . sep_or_term_list(field_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record With
##
## Ends in an error in state: 116.
##
## ne_injection(Record,field_assignment) -> Record . sep_or_term_list(field_assignment,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## ne_injection(Record,field_assignment) -> Record . LBRACKET sep_or_term_list(field_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Record
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set LBRACKET Verbatim With
##
## Ends in an error in state: 618.
##
## injection(Set,expr) -> Set LBRACKET sep_or_term_list(expr,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 294, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 293, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set LBRACKET With
##
## Ends in an error in state: 616.
##
## injection(Set,expr) -> Set LBRACKET . sep_or_term_list(expr,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(Set,expr) -> Set LBRACKET . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set Verbatim With
##
## Ends in an error in state: 621.
##
## injection(Set,expr) -> Set sep_or_term_list(expr,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Set sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
## In state 294, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 293, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set With
##
## Ends in an error in state: 115.
##
## injection(Set,expr) -> Set . sep_or_term_list(expr,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(Set,expr) -> Set . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(Set,expr) -> Set . LBRACKET sep_or_term_list(expr,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
## injection(Set,expr) -> Set . LBRACKET RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## Set
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim And With
##
## Ends in an error in state: 250.
##
## conj_expr -> conj_expr And . set_membership [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Module Function From End Else EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## conj_expr And
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim CAT With
##
## Ends in an error in state: 226.
##
## cat_expr -> cons_expr CAT . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## cons_expr CAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim CONS With
##
## Ends in an error in state: 233.
##
## cons_expr -> add_expr CONS . cons_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE GT GE Function From End Else EQ EOF Const COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Contains With
##
## Ends in an error in state: 223.
##
## set_membership -> core_expr Contains . set_membership [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Module Function From End Else EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## core_expr Contains
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim EQ With
##
## Ends in an error in state: 246.
##
## comp_expr -> comp_expr EQ . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim GE With
##
## Ends in an error in state: 244.
##
## comp_expr -> comp_expr GE . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim GT With
##
## Ends in an error in state: 242.
##
## comp_expr -> comp_expr GT . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LE With
##
## Ends in an error in state: 240.
##
## comp_expr -> comp_expr LE . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LT With
##
## Ends in an error in state: 238.
##
## comp_expr -> comp_expr LT . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim MINUS With
##
## Ends in an error in state: 231.
##
## add_expr -> add_expr MINUS . mult_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Mod With
##
## Ends in an error in state: 216.
##
## mult_expr -> mult_expr Mod . unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr Mod
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim NE With
##
## Ends in an error in state: 236.
##
## comp_expr -> comp_expr NE . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE Module LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Or With
##
## Ends in an error in state: 221.
##
## disj_expr -> disj_expr Or . conj_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Module Function From End Else EOF Const COMMA COLON Block Begin Attr ARROW ]
##
## The known suffix of the stack is as follows:
## disj_expr Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim PLUS With
##
## Ends in an error in state: 229.
##
## add_expr -> add_expr PLUS . mult_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim SLASH With
##
## Ends in an error in state: 214.
##
## mult_expr -> mult_expr SLASH . unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim TIMES With
##
## Ends in an error in state: 199.
##
## mult_expr -> mult_expr TIMES . unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Module Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attr And ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim With
##
## Ends in an error in state: 632.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 222, spurious reduction of production unary_expr -> core_expr 
## In state 174, spurious reduction of production mult_expr -> unary_expr 
## In state 198, spurious reduction of production add_expr -> mult_expr 
## In state 228, spurious reduction of production cons_expr -> add_expr 
## In state 225, spurious reduction of production cat_expr -> cons_expr 
## In state 248, spurious reduction of production comp_expr -> cat_expr 
## In state 235, spurious reduction of production set_membership -> comp_expr 
## In state 176, spurious reduction of production conj_expr -> set_membership 
## In state 252, spurious reduction of production disj_expr -> conj_expr 
## In state 220, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: With
##
## Ends in an error in state: 630.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Const With
##
## Ends in an error in state: 370.
##
## open_const_decl -> nseq(Attr) Const . unqualified_decl(EQ) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Function Ident LPAR Const Ident RPAR COLON Constr Is With
##
## Ends in an error in state: 368.
##
## open_fun_decl -> nseq(Attr) Function Ident parameters type_annot Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function Ident parameters type_annot Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Function Ident LPAR Const Ident RPAR COLON Constr With
##
## Ends in an error in state: 367.
##
## open_fun_decl -> nseq(Attr) Function Ident parameters type_annot . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function Ident parameters type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 172, spurious reduction of production type_annot -> COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Function Ident LPAR Const Ident RPAR Is With
##
## Ends in an error in state: 365.
##
## open_fun_decl -> nseq(Attr) Function Ident parameters Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function Ident parameters Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Function Ident LPAR Const Ident RPAR With
##
## Ends in an error in state: 364.
##
## open_fun_decl -> nseq(Attr) Function Ident parameters . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Function Ident parameters . type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function Ident parameters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Function Ident With
##
## Ends in an error in state: 363.
##
## open_fun_decl -> nseq(Attr) Function Ident . parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Function Ident . parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Function With
##
## Ends in an error in state: 362.
##
## open_fun_decl -> nseq(Attr) Function . Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Function . Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Function
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Recursive Function Ident LPAR Const Ident RPAR COLON Constr Is With
##
## Ends in an error in state: 360.
##
## open_fun_decl -> nseq(Attr) Recursive Function Ident parameters type_annot Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function Ident parameters type_annot Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Recursive Function Ident LPAR Const Ident RPAR COLON Constr With
##
## Ends in an error in state: 359.
##
## open_fun_decl -> nseq(Attr) Recursive Function Ident parameters type_annot . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function Ident parameters type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 172, spurious reduction of production type_annot -> COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Recursive Function Ident LPAR Const Ident RPAR Is With
##
## Ends in an error in state: 357.
##
## open_fun_decl -> nseq(Attr) Recursive Function Ident parameters Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function Ident parameters Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Recursive Function Ident LPAR Const Ident RPAR With
##
## Ends in an error in state: 356.
##
## open_fun_decl -> nseq(Attr) Recursive Function Ident parameters . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Recursive Function Ident parameters . type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function Ident parameters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Recursive Function Ident With
##
## Ends in an error in state: 355.
##
## open_fun_decl -> nseq(Attr) Recursive Function Ident . parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Recursive Function Ident . parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Recursive Function With
##
## Ends in an error in state: 354.
##
## open_fun_decl -> nseq(Attr) Recursive Function . Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Recursive Function . Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive Function
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Recursive With
##
## Ends in an error in state: 353.
##
## open_fun_decl -> nseq(Attr) Recursive . Function Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) Recursive . Function Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Recursive
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr With
##
## Ends in an error in state: 352.
##
## open_const_decl -> nseq(Attr) . Const unqualified_decl(EQ) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) . Function Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) . Function Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) . Recursive Function Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> nseq(Attr) . Recursive Function Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production nseq(Attr) -> Attr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident COLON Constr EQ With
##
## Ends in an error in state: 336.
##
## unqualified_decl(EQ) -> Ident type_annot EQ . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Ident type_annot EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident COLON Constr With
##
## Ends in an error in state: 335.
##
## unqualified_decl(EQ) -> Ident type_annot . EQ expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Ident type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 172, spurious reduction of production type_annot -> COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident COLON With
##
## Ends in an error in state: 171.
##
## type_annot -> COLON . type_expr [ Is EQ ASS ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident EQ With
##
## Ends in an error in state: 333.
##
## unqualified_decl(EQ) -> Ident EQ . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident With
##
## Ends in an error in state: 332.
##
## unqualified_decl(EQ) -> Ident . EQ expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## unqualified_decl(EQ) -> Ident . type_annot EQ expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const With
##
## Ends in an error in state: 331.
##
## open_const_decl -> Const . unqualified_decl(EQ) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident RPAR COLON Constr Is With
##
## Ends in an error in state: 328.
##
## open_fun_decl -> Function Ident parameters type_annot Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters type_annot Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident RPAR COLON Constr With
##
## Ends in an error in state: 327.
##
## open_fun_decl -> Function Ident parameters type_annot . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 172, spurious reduction of production type_annot -> COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident RPAR Is With
##
## Ends in an error in state: 325.
##
## open_fun_decl -> Function Ident parameters Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident RPAR With
##
## Ends in an error in state: 324.
##
## open_fun_decl -> Function Ident parameters . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Function Ident parameters . type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident With
##
## Ends in an error in state: 323.
##
## open_fun_decl -> Function Ident . parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Function Ident . parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function With
##
## Ends in an error in state: 322.
##
## open_fun_decl -> Function . Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Function . Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Function
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr Is Begin Type Ident Is Constr With
##
## Ends in an error in state: 384.
##
## open_module_decl -> Module Constr Is Begin module_ . End [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr Is Begin module_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 90, spurious reduction of production open_type_decl -> Type Ident Is type_expr 
## In state 340, spurious reduction of production option(SEMI) -> 
## In state 342, spurious reduction of production type_decl -> open_type_decl option(SEMI) 
## In state 339, spurious reduction of production declaration -> type_decl 
## In state 377, spurious reduction of production nseq(declaration) -> declaration 
## In state 351, spurious reduction of production module_ -> nseq(declaration) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr Is Begin With
##
## Ends in an error in state: 383.
##
## open_module_decl -> Module Constr Is Begin . module_ End [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr Is Begin
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr Is Constr DOT With
##
## Ends in an error in state: 381.
##
## nsepseq(module_name,DOT) -> Constr DOT . nsepseq(module_name,DOT) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr Is LBRACE Type Ident Is Constr With
##
## Ends in an error in state: 374.
##
## open_module_decl -> Module Constr Is LBRACE module_ . RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr Is LBRACE module_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 90, spurious reduction of production open_type_decl -> Type Ident Is type_expr 
## In state 340, spurious reduction of production option(SEMI) -> 
## In state 342, spurious reduction of production type_decl -> open_type_decl option(SEMI) 
## In state 339, spurious reduction of production declaration -> type_decl 
## In state 377, spurious reduction of production nseq(declaration) -> declaration 
## In state 351, spurious reduction of production module_ -> nseq(declaration) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr Is LBRACE With
##
## Ends in an error in state: 321.
##
## open_module_decl -> Module Constr Is LBRACE . module_ RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr Is LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr Is With
##
## Ends in an error in state: 320.
##
## open_module_alias -> Module Constr Is . nsepseq(module_name,DOT) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module Constr Is . LBRACE module_ RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module Constr Is . Begin module_ End [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module Constr With
##
## Ends in an error in state: 319.
##
## open_module_alias -> Module Constr . Is nsepseq(module_name,DOT) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module Constr . Is LBRACE module_ RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module Constr . Is Begin module_ End [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module With
##
## Ends in an error in state: 318.
##
## open_module_alias -> Module . Constr Is nsepseq(module_name,DOT) [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module . Constr Is LBRACE module_ RBRACE [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_module_decl -> Module . Constr Is Begin module_ End [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Module
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident LPAR Const Ident RPAR COLON WILD Is With
##
## Ends in an error in state: 625.
##
## open_fun_decl -> Recursive Function Ident parameters type_annot Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters type_annot Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident LPAR Const Ident RPAR COLON WILD With
##
## Ends in an error in state: 624.
##
## open_fun_decl -> Recursive Function Ident parameters type_annot . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters type_annot
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production cartesian -> core_type 
## In state 47, spurious reduction of production fun_type -> cartesian 
## In state 68, spurious reduction of production type_expr -> fun_type 
## In state 172, spurious reduction of production type_annot -> COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident LPAR Const Ident RPAR Is With
##
## Ends in an error in state: 110.
##
## open_fun_decl -> Recursive Function Ident parameters Is . expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident LPAR Const Ident RPAR With
##
## Ends in an error in state: 109.
##
## open_fun_decl -> Recursive Function Ident parameters . Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Recursive Function Ident parameters . type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident With
##
## Ends in an error in state: 93.
##
## open_fun_decl -> Recursive Function Ident . parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Recursive Function Ident . parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function With
##
## Ends in an error in state: 92.
##
## open_fun_decl -> Recursive Function . Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Recursive Function . Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive Function
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive With
##
## Ends in an error in state: 91.
##
## open_fun_decl -> Recursive . Function Ident parameters Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
## open_fun_decl -> Recursive . Function Ident parameters type_annot Is expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Recursive
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Attr Constr Of With
##
## Ends in an error in state: 37.
##
## variant -> nseq(Attr) Constr Of . fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Constr Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Attr Record Ident COLON Constr With
##
## Ends in an error in state: 74.
##
## record_type -> nseq(Attr) Record sep_or_term_list(field_decl,SEMI) . End [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Record sep_or_term_list(field_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 80, spurious reduction of production field_decl -> Ident COLON type_expr 
## In state 70, spurious reduction of production nsepseq(field_decl,SEMI) -> field_decl 
## In state 69, spurious reduction of production sep_or_term_list(field_decl,SEMI) -> nsepseq(field_decl,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Attr Record LBRACKET Ident COLON Constr With
##
## Ends in an error in state: 60.
##
## record_type -> nseq(Attr) Record LBRACKET sep_or_term_list(field_decl,SEMI) . RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Record LBRACKET sep_or_term_list(field_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 80, spurious reduction of production field_decl -> Ident COLON type_expr 
## In state 70, spurious reduction of production nsepseq(field_decl,SEMI) -> field_decl 
## In state 69, spurious reduction of production sep_or_term_list(field_decl,SEMI) -> nsepseq(field_decl,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Attr Record LBRACKET With
##
## Ends in an error in state: 59.
##
## record_type -> nseq(Attr) Record LBRACKET . sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Record LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Attr Record With
##
## Ends in an error in state: 58.
##
## record_type -> nseq(Attr) Record . sep_or_term_list(field_decl,SEMI) End [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
## record_type -> nseq(Attr) Record . LBRACKET sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Record
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Attr VBAR With
##
## Ends in an error in state: 56.
##
## sum_type -> nseq(Attr) VBAR . nsepseq(variant,VBAR) [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Attr With
##
## Ends in an error in state: 55.
##
## record_type -> nseq(Attr) . Record sep_or_term_list(field_decl,SEMI) End [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
## record_type -> nseq(Attr) . Record LBRACKET sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
## sum_type -> nseq(Attr) . VBAR nsepseq(variant,VBAR) [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
## variant -> nseq(Attr) . Constr [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
## variant -> nseq(Attr) . Constr Of fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production nseq(Attr) -> Attr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is BigMap With
##
## Ends in an error in state: 29.
##
## core_type -> BigMap . type_tuple [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Constr DOT With
##
## Ends in an error in state: 24.
##
## module_access_t -> Constr DOT . module_var_t [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Constr Of With
##
## Ends in an error in state: 7.
##
## variant -> Constr Of . fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## Constr Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Constr VBAR With
##
## Ends in an error in state: 34.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Constr With
##
## Ends in an error in state: 627.
##
## contract -> module_ . EOF [ # ]
##
## The known suffix of the stack is as follows:
## module_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 90, spurious reduction of production open_type_decl -> Type Ident Is type_expr 
## In state 340, spurious reduction of production option(SEMI) -> 
## In state 342, spurious reduction of production type_decl -> open_type_decl option(SEMI) 
## In state 339, spurious reduction of production declaration -> type_decl 
## In state 377, spurious reduction of production nseq(declaration) -> declaration 
## In state 351, spurious reduction of production module_ -> nseq(declaration) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is LPAR WILD With
##
## Ends in an error in state: 85.
##
## par(type_expr) -> LPAR type_expr . RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production cartesian -> core_type 
## In state 47, spurious reduction of production fun_type -> cartesian 
## In state 68, spurious reduction of production type_expr -> fun_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is LPAR With
##
## Ends in an error in state: 10.
##
## par(type_expr) -> LPAR . type_expr RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is List With
##
## Ends in an error in state: 17.
##
## core_type -> List . par(type_expr) [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## List
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Map LPAR WILD COMMA With
##
## Ends in an error in state: 52.
##
## nsepseq(type_expr,COMMA) -> type_expr COMMA . nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Map LPAR WILD With
##
## Ends in an error in state: 77.
##
## par(nsepseq(type_expr,COMMA)) -> LPAR nsepseq(type_expr,COMMA) . RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(type_expr,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production cartesian -> core_type 
## In state 47, spurious reduction of production fun_type -> cartesian 
## In state 68, spurious reduction of production type_expr -> fun_type 
## In state 51, spurious reduction of production nsepseq(type_expr,COMMA) -> type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Map LPAR With
##
## Ends in an error in state: 16.
##
## par(nsepseq(type_expr,COMMA)) -> LPAR . nsepseq(type_expr,COMMA) RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Map With
##
## Ends in an error in state: 15.
##
## core_type -> Map . type_tuple [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Map
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Attr Ident COLON With
##
## Ends in an error in state: 65.
##
## field_decl -> nseq(Attr) Ident COLON . type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Attr Ident With
##
## Ends in an error in state: 64.
##
## field_decl -> nseq(Attr) Ident . COLON type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Attr With
##
## Ends in an error in state: 63.
##
## field_decl -> nseq(Attr) . Ident COLON type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production nseq(Attr) -> Attr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Ident COLON Constr With
##
## Ends in an error in state: 83.
##
## record_type -> Record sep_or_term_list(field_decl,SEMI) . End [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## Record sep_or_term_list(field_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 80, spurious reduction of production field_decl -> Ident COLON type_expr 
## In state 70, spurious reduction of production nsepseq(field_decl,SEMI) -> field_decl 
## In state 69, spurious reduction of production sep_or_term_list(field_decl,SEMI) -> nsepseq(field_decl,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Ident COLON With
##
## Ends in an error in state: 14.
##
## field_decl -> Ident COLON . type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Ident With
##
## Ends in an error in state: 13.
##
## field_decl -> Ident . COLON type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record LBRACKET Ident COLON Constr With
##
## Ends in an error in state: 81.
##
## record_type -> Record LBRACKET sep_or_term_list(field_decl,SEMI) . RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET sep_or_term_list(field_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production variant -> Constr 
## In state 33, spurious reduction of production nsepseq(variant,VBAR) -> variant 
## In state 67, spurious reduction of production sum_type -> nsepseq(variant,VBAR) 
## In state 53, spurious reduction of production type_expr -> sum_type 
## In state 80, spurious reduction of production field_decl -> Ident COLON type_expr 
## In state 70, spurious reduction of production nsepseq(field_decl,SEMI) -> field_decl 
## In state 69, spurious reduction of production sep_or_term_list(field_decl,SEMI) -> nsepseq(field_decl,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record LBRACKET With
##
## Ends in an error in state: 12.
##
## record_type -> Record LBRACKET . sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record With
##
## Ends in an error in state: 11.
##
## record_type -> Record . sep_or_term_list(field_decl,SEMI) End [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
## record_type -> Record . LBRACKET sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## Record
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Set With
##
## Ends in an error in state: 9.
##
## core_type -> Set . par(type_expr) [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Set
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is VBAR Attr With
##
## Ends in an error in state: 35.
##
## variant -> nseq(Attr) . Constr [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
## variant -> nseq(Attr) . Constr Of fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production nseq(Attr) -> Attr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is VBAR With
##
## Ends in an error in state: 5.
##
## sum_type -> VBAR . nsepseq(variant,VBAR) [ Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is WILD ARROW With
##
## Ends in an error in state: 48.
##
## fun_type -> cartesian ARROW . fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ]
##
## The known suffix of the stack is as follows:
## cartesian ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is WILD TIMES Constr With
##
## Ends in an error in state: 26.
##
## module_access_t -> Constr . DOT module_var_t [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is WILD TIMES WILD TIMES With
##
## Ends in an error in state: 45.
##
## nsepseq(core_type,TIMES) -> core_type TIMES . nsepseq(core_type,TIMES) [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## core_type TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is WILD TIMES With
##
## Ends in an error in state: 42.
##
## cartesian -> core_type TIMES . nsepseq(core_type,TIMES) [ VBAR Type SEMI Recursive RPAR RBRACKET RBRACE Module Is Function End EQ EOF Const COMMA Attr ASS ARROW ]
##
## The known suffix of the stack is as follows:
## core_type TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is With
##
## Ends in an error in state: 3.
##
## open_type_decl -> Type Ident Is . type_expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident With
##
## Ends in an error in state: 2.
##
## open_type_decl -> Type Ident . Is type_expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type With
##
## Ends in an error in state: 1.
##
## open_type_decl -> Type . Ident Is type_expr [ Type SEMI Recursive RBRACE Module Function End EOF Const Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: With
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

