/*
  The difference between tuples and arguments is subtle in JsLIGO.

   `f(a, b);`
   f is called with two arguments

   `f((a, b));`
   f is called with a tuple.

*/

type fun_type = (a: int, b: int) => int;

let arguments_ = (b: int, c: int):int => b + c;

let arguments_type_def = (b: fun_type):int => b (5, 3);

let arguments_test = (_: int):int => arguments_type_def (arguments_);

type tuple_type = (a: [int, int]) => int;

let tuple = ([a, b]: [int, int]):int => a + b;

let tuple_type_def = (b: tuple_type):int => b ([5, 3]);

let tuple_test = (_: int):int => tuple_type_def (tuple);


/* inline */

let arguments_inline = (b: int, c: int):int => b + c;

let arguments_type_def_inline = (b: (a: int, b: int) => int):int => b(5, 3);

let arguments_test_inline = (_: int):int =>
  arguments_type_def_inline (arguments_inline);

let tuple_inline = ([a, b]: [int, int]):int => { return a + b; };

let tuple_type_def_inline = (b: (a: [int, int]) => int):int => b ([5, 3]);

let tuple_test_inline = (_: int):int =>
  tuple_type_def_inline(tuple_inline);
