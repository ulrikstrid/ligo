type storage = [int, list <int>];

type parameter = list <int>;

type returnx = [list <operation>, storage];

let x : list <int> = list([]);
let y : list <int> = list([3, 4, 5]);
let z : list <int> = list([2, ...y]);

let main = ([p, s] : [parameter, storage]) : returnx => {
  let storage = match (p, list([
    ([]: parameter) => s,
    ([hd, ...tl]: parameter) => [s[0] + hd, tl]
  ]));
  return [(list([]) as list<operation>), storage];
};

let size_ = (s : list <int>) : nat => List.length (s);

let fold_op = (s : list <int>) : int => {
  let aggregate = (t: [int, int]):int => t[0] + t[1];
  return List.fold (aggregate, s, 10);
};

let map_op = (s : list <int>) : list <int> =>
  List.map ((cur : int) => cur + 1, s);

let iter_op = (s : list <int>) : unit => {
  let do_nothing = (useless : int):unit => unit;
  List.iter (do_nothing, s);
};
