type tokenId = nat;
type tokenOwner = address;
type tokenAmount = nat;
type transferContents = {
  to_: tokenOwner,
  token_id: tokenId,
  amount: tokenAmount
};
type transfer = {
  from_: tokenOwner,
  txs: list<transferContents>
};
type transferContentsMichelson = michelson_pair_right_comb<transferContents>;
type transferAuxiliary = {
  from_: tokenOwner,
  txs: list<transferContentsMichelson>
};
type transferMichelson = michelson_pair_right_comb<transferAuxiliary>;
type transferParameter = list<transferMichelson>;
type parameter = 
| ["Transfer", transferParameter];
type storage = big_map<[tokenId, tokenOwner]>;
type entrypointParameter = [parameter, storage];
type entrypointReturn = [list<operation>, storage];
let errorTokenUndefined = "TOKEN_UNDEFINED";
let errorNotOwner = "NOT_OWNER";
let errorInsufficientBalance = "INSUFFICIENT_BALANCE";
type transferContentsIteratorAccumulator = [storage, tokenOwner];
let transferContentsIterator = ([accumulator, transferContentsMichelson]: [transferContentsIteratorAccumulator, transferContentsMichelson]): transferContentsIteratorAccumulator => {
  let [storage, from_] = accumulator;
  let transferContents: transferContents = Layout.convert_from_right_comb(transferContentsMichelson);
  let tokenOwner: option<tokenOwner> = Map.find_opt(transferContents.token_id, storage);
  let tokenOwner2 = match(tokenOwner, {
    None: () => (failwith(errorTokenUndefined) as tokenOwner),
    Some: (value: transferParameter) => {
      if (value == from_) {
        return tokenOwner
      } else {
        (failwith(errorInsufficientBalance) as tokenOwner);
      }
    }
  });
  let storage2 = Map.update(
    transferContents.token_id,
    Some(transferContents.to_),
    storage
  );
  return [storage2, from_]
};
let allowOnlyOwnTransfer = (from: tokenOwner): unit => {
  if (from != Tezos.sender) {
    failwith(errorNotOwner)
  } else { 
    return unit; 
  }
};
let transferIterator = ([storage, transferMichelson]: [storage, transferMichelson]): storage => {
  let transferAuxiliary2: transferAuxiliary = Layout.convert_from_right_comb(transferMichelson);
  let from_: tokenOwner = transferAuxiliary2.from_;
  allowOnlyOwnTransfer(from_);
  let [storage2, _] = List.fold(
    transferContentsIterator, 
    transferAuxiliary2.txs,
    List(storage, from_)
  );
  return storage2
};
let transfer = ([transferParameter, storage]: [transferParameter, storage]): entrypointReturn => {
  let storage2 = List.fold(transferIterator, transferParameter, storage);
  return [(List() as list<operation>), storage2];
};
let main = ([parameter, storage]: entrypointParameter): entrypointReturn =>
  match(parameter, {
    Transfer: (transferParameter: transferParameter) => transfer([transferParameter, storage])
  });
